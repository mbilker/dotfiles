#                 ‚ñà‚ñà      
#                ‚ñë‚ñà‚ñà      
#  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñà‚ñà      
# ‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà  ‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë ‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  
#    ‚ñà‚ñà  ‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñë‚ñà‚ñà‚ñë‚ñë‚ñë‚ñà‚ñà 
#   ‚ñà‚ñà    ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë‚ñà‚ñà  ‚ñë‚ñà‚ñà 
#  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñë‚ñà‚ñà  ‚ñë‚ñà‚ñà 
# ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë  ‚ñë‚ñë   ‚ñë‚ñë  
#
#  ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì
# ‚ñë‚ñì author          ‚ñì mbilker <me@mbilker.us>
# ‚ñë‚ñì original author ‚ñì xero <x@xero.nu>
# ‚ñë‚ñì code            ‚ñì https://github.com/mbilker/dotfiles
# ‚ñë‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì
# ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë

#ICO_DIRTY="‚ö°"
#ICO_DIRTY="‚ÜØ"
ICO_DIRTY="*"
#ICO_AHEAD="‚Üë"
ICO_AHEAD="ü†ô"
#ICO_AHEAD="‚ñ≤"
#ICO_BEHIND="‚Üì"
ICO_BEHIND="ü†õ"
#ICO_BEHIND="‚ñº"
ICO_DIVERGED="‚•Æ"
COLOR_ROOT="%F{red}"
COLOR_USER="%F{cyan}"
COLOR_NORMAL="%F{white}"
PROMPT_STYLE="classic"


#‚ñà‚ñì‚ñí‚ñë allow functions in the prompt
setopt PROMPT_SUBST
autoload -Uz colors && colors

#‚ñà‚ñì‚ñí‚ñë colors for permissions
if [[ "$EUID" -ne "0" ]]
then  # if user is not root
	USER_LEVEL="${COLOR_USER}"
else # root!
	USER_LEVEL="${COLOR_ROOT}"
fi

#‚ñà‚ñì‚ñí‚ñë git prompt
setopt promptsubst
autoload -Uz vcs_info
GIT_PROMPT() {
  if $(git rev-parse --is-inside-work-tree >/dev/null 2>&1); then
    repo_path=$(git rev-parse --git-dir 2>/dev/null)
    dirty=$(parse_git_dirty)
    ref=$(git symbolic-ref HEAD 2> /dev/null) || ref="‚û¶ $(git rev-parse --short HEAD 2> /dev/null)"
    if [[ -n $dirty ]]; then
      # prompt_segment yellow black
      color=%F{yellow}
    else
      # prompt_segment green black
      color=%F{green}
    fi

    if [[ -e "${repo_path}/BISECT_LOG" ]]; then
      mode=" <B>"
    elif [[ -e "${repo_path}/MERGE_HEAD" ]]; then
      mode=" >M<"
    elif [[ -e "${repo_path}/rebase" || -e "${repo_path}/rebase-apply" || -e "${repo_path}/rebase-merge" || -e "${repo_path}/../.dotest" ]]; then
      mode=" >R>"
    fi

    zstyle ':vcs_info:*' enable git
    zstyle ':vcs_info:*' get-revision true
    zstyle ':vcs_info:*' check-for-changes true
    zstyle ':vcs_info:*' stagedstr '+'
    zstyle ':vcs_info:*' unstagedstr '‚óè'
    zstyle ':vcs_info:*' formats ' %u%c'
    zstyle ':vcs_info:*' actionformats ' %u%c'
    vcs_info

    case "$PROMPT_STYLE" in
      ninja)
        echo "${COLOR_NORMAL}${color}${ref/refs\/heads\//}${mode}${vcs_info_msg_0_%% }"
      ;;
      ascii)
        echo "%{$bg[magenta]%}%F{cyan}‚ñì‚ñí‚ñë ${color}${ref/refs\/heads\//}${mode}${vcs_info_msg_0_%% } $reset_color%F{magenta}‚ñí‚ñë"
      ;;
      arrows)
        echo "%{$bg[magenta]%}%F{cyan}ÓÇ∞ ${color}${ref/refs\/heads\//}${mode}${vcs_info_msg_0_%% } $reset_color%F{magenta}ÓÇ∞"
      ;;
      *)
        echo "${USER_LEVEL}‚îÄ[${color}${ref/refs\/heads\//}${mode}${vcs_info_msg_0_%% }${USER_LEVEL}]"
      ;;
    esac
  fi
}

case "$PROMPT_STYLE" in
#‚ñà‚ñì‚ñí‚ñë ascii
ascii)
PROMPT='%{$bg[cyan]%} %F{black}%~ $(GIT_PROMPT)$reset_color %f'
;;
#‚ñà‚ñì‚ñí‚ñë arrows
arrows)
PROMPT='%{$bg[cyan]%}%F{black}ÓÇ∞ %~ $(GIT_PROMPT)$reset_color %f'
;;
#‚ñà‚ñì‚ñí‚ñë ninja
ninja)
PROMPT='%F{white}
        ‚ñü‚ñô  ${USER_LEVEL}%~   %F{white}$(GIT_PROMPT) %F{white}
‚ñü‚ñí${USER_LEVEL}‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë%F{white}‚ñú‚ñô‚ñú‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñõ
‚ñú‚ñí${USER_LEVEL}‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë%F{white}‚ñü‚ñõ‚ñü‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñõ
        ‚ñú‚ñõ  
            %f'
;;
#‚ñà‚ñì‚ñí‚ñë dual line
dual)
PROMPT='${USER_LEVEL}‚îå[${COLOR_NORMAL}%~${USER_LEVEL}]$(GIT_PROMPT)
${USER_LEVEL}‚îî‚îÄ - %f'
;;
#‚ñà‚ñì‚ñí‚ñë classic
*)
PROMPT='${USER_LEVEL}[${COLOR_NORMAL}%~${USER_LEVEL}]$(GIT_PROMPT)‚îÄ‚îÄ - %f'
;;
esac
